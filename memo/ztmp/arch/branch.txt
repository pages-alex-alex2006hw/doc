Static Branch Prediction
------------------------
1a. ALWAYS STALL (unop H/W: resolved at EX stage) -> 3 cycle penalty
1b. ALWAYS STALL (opt H/W: resolved at ID stage)  -> 1 cycle penalty

2a. ASSUME BRANCH NOT TAKEN (opt H/W) -> if taken 1 cycle penalty, 
                                         if not taken, no penalty 
2b. ASSUME TAKEN: NOT possible in bisic MIPS pipeline
    [static branch prediction]

3. BRANCH DELAY SLOTS (from before/target/fall-through)

4. CANCELING/NULLIFYING BRANCHES (cancel if taken/cancel if not taken)
   [static branch prediction]


Dynamic Branch Prediction
-------------------------
* what needs to be predicted?
  a. BTA
  b. is branch taken?


Branch Prediction Buffers = BHT (branch history table) => predicts (b)
------------------------------------------------------
* goal: early prediction (taken/not taken)
* how:
     - given the address of branch instruction is xxxxxx....xxx
       taken 12 bits from the address and use this as an index to the
       BHT
     - A BHT entry is a 1-bit field that predicts taken/not-taken
       (1-bit predictor)
     
* improvement: 2-bit predictor 
    - based on "hysteresis"
    - 2-bit = 4-state machine

* more improvement: correlating (m,n)-predictor (/w past global history)
    - local + global history
    - last m branches executed anywhere
    - last n accesses to *a specific* BHT entry
    - e.g. (2,2)-predictor
       + 4 local 2-bit bhts for each possible global history
       + global history tables: T,T/T,NT/NT,T/NT,NT BHT table 


Branch Target Buffers => predicts (a)
---------------------
* moves BTA computation to IF (from ID)
       