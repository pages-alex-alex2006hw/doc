graph cs 
{
	node [shape=plaintext]
        "algorithm" [shape=box];
        "system" [shape=box];
        "software" [shape=box];
        "formal" [shape=box];
        "programming systems" [shape=box];

	"algorithm" -- "distributed algorithm";
	"algorithm" -- "parallel algorithm";
	"algorithm" -- "randomized/prob algorithm";

	"system" -- "networks";
	"system" -- "architecture";
	"system" -- "OS";
	"system" -- "distributed systems" -- "IPC"
	"system" -- "real-time systems"
	"real-time systems" -- "reliability"

	"OS" -- "memory" -- "reconfigurable computing"
	"memory" -- "high-level synthesis"
	"memory" -- "architecture"
        "OS" -- "IPC";
        "IPC" -- "concurrency control"; 

	"software" -- "database systems";
	"software" -- "AI";

	"database systems" -- "transactions";
	"transactions" -- "concurrency control";

        "concurrency control" -- "process theories" -- "pi-calculus";

	"formal" -- "process theories"
	"formal" -- "data theories";
	"process theories" -- "CCS \& CSP";
	"data theories" -- "algebraic spec";

	"formal" -- "model checking";
	"model checking" -- "theorem proving";
   	"AI" -- "theorem proving";
	"model checking" -- "CCS \& CSP";

	"parallel architecture" -- "shared memory"
	"distributed systems" -- "message passing" -- "shared memory"
	"parallel architecture" -- "architecture"
	"parallel architecture" -- "parallel algorithm"
	"distributed systems" -- "distributed algorithm"
	
	"lambda calculus" -- "semantics"
	"programming systems" -- "semantics"
	"programming systems" -- "type theory"
	"type theory" -- "semantics"
	"type theory" -- "data theories"
	"programming systems" -- "lambda calculus"
	"programming systems" -- "compilers"
	"programming systems" -- "interpreters"
	"interpreters" -- "lambda calculus" -- "scheme"
	"parallelizing compilers" -- "compilers"
	"parallelizing compilers" -- "parallel architecture"

	"theory" -- "FSM" -- "digital systems"
	"FSM" -- "model checking"
	"theory" -- "computability"
	"theory" -- "complexity"
	"complexity" -- "circuit complexity" -- "CAD"
	"computability" -- "lambda calculus"
	"theory" -- "TM" -- "architecture"
	"TM" -- "reconfigurable computing"

	"digital systems" [shape=box]
	"digital systems" -- "architecture"
	"digital systems" -- "CAD"
	"digital systems" -- "reconfigurable computing"
	"reconfigurable computing" -- "architecture"
	"reconfigurable computing" -- "compilers" -- "debugging"
	"compilers" -- "linking \& loading"
	"FPGA" -- "digital systems"
	"FPGA" -- "reconfigurable computing"

	"CAD" -- "high-level synthesis" -- "reconfigurable computing"
	"CAD" -- "logic synthesis" -- "FPGA"
	"CAD" -- "physical synthesis"
	"CAD" -- "testing"
	"digital systems" -- "SoC" -- "embedded systems"
	"SoC" -- "NoC" -- "networks"

	"prolog" -- "constraint programming" -- "AI" 
	"SAT" -- "constraint programming" -- "theorem proving" -- "larch" -- "formal methods" 
	"model checking" -- "SAT" -- "testing"
	"logic synthesis" -- "BDD" -- "SAT"
	"algorithm" -- "scheduling" -- "OS"
	"scheduling" -- "high-level synthesis"

	"process theories" -- "Petri nets" -- "mutual exclusion"
	"Petri nets" -- "async circuits"
	"async circuits" -- "Tangram" -- "process theories"
	"async circuits" -- "digital systems"
	"async circuits" -- "logic synthesis"

	"SoC" -- "memory" -- "embedded systems"
	"logic synthesis" -- "control circuits" -- "embedded systems" 
	"control circuits" -- "SoC"
	"SoC" -- "arithmetic" -- "digital systems"

	"distributed algorithms" -- "mutual exclusion" -- "IPC"
	"mutual exclusion" -- "concurrency control"
	"concurrency control" -- "Petri nets"
	"compilers" -- "C \& C++" -- "spatial computation";
	"spatial computation" -- "high-level synthesis";
	"spatial computation" -- "reconfigurable computing"
	"interpreters" -- "continuations" -- "scheme"

	"software" -- "graphics" -- "GPU" -- "architecture"
	"GPU" -- "map-reduce" -- "parallel algorithm"

	"architecture" -- "ILP"
	"ILP" -- "VLIW"
	"ILP" -- "superscalar"
	"ILP" -- "pipelining" -- "continuation" -- "tail-recursion" -- "scheme"
}